%% Load train dataset into image directory

imDir = fullfile('datafolder1');

%% Load corresponding labelled train dataset into pixel directory

pxDir = fullfile('datafolder2');


%% Assign class labels and Label IDs

classNames = ["background","nuclei","ER","cyto"];
labelIDs   = [0 2 3 4];

%% Load validation dataset into image directory

imDir1 = fullfile('datafolder3');

%% Load corresponding labelled validation dataset into pixel directory

pxDir1 = fullfile('datafolder4');


%% Create semantic segmentation network

numFilters = 64;
filterSize = 3;
numClasses = 4;
layers = [
    imageInputLayer([512 512 1])
    convolution2dLayer(filterSize,numFilters,'Padding',1)
    reluLayer()
    maxPooling2dLayer(2,'Stride',2)
    convolution2dLayer(filterSize,numFilters,'Padding',1)
    reluLayer()
    transposedConv2dLayer(4,numFilters,'Stride',2,'Cropping',1);
    convolution2dLayer(1,numClasses);
    softmaxLayer()
    pixelClassificationLayer()
    ];
trainingData = combine(imds,pxds);
validationData = combine(imds_1,pxds_1)

%% Set training options

opts = trainingOptions('sgdm', ...'InitialLearnRate',0.01, ...'MaxEpochs',50, ...
    'MiniBatchSize',32,'Plots','training-progress', ValidationData = validationData, ValidationFrequency=5, Shuffle='every-epoch');


%% Train the network
net = trainNetwork (trainingData,layers,opts);
%% Load test data and labeled test data
testDir = fullfile('datafolder5');

testlabel = fullfile('datafolder6');

pxdsTruth = pixelLabelDatastore(testlabel,classNames,labelIDs);
pxdsResults = semanticseg(testDir, net,'MiniBatchSize',4,'WriteLocation',tempdir);
metrics = evaluateSemanticSegmentation(pxdsResults,pxdsTruth);
